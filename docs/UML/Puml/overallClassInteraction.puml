@startuml
!include Style.puml

class QuizHub {
    + **Run** (): void
}

class Parser {
    + {static} **parseCommand** (rawUserInput: String): Command
    - {static} **parseMCQCommand** (userInput: String): Command
    - {static} **parseShortAnswerCommand** (userInput: String): Command
    - {static} **parseStartCommand** (userInput: String): Command
    - {static} **parseEditCommand** (userInput: String): Command
    - {static} **parseDeleteCommand** (userInput: String): Command
    - {static} **parseFindCommand** (userInput: String): Command
    - {static} **parseMarkDiffCommand** (userInput: String): Command
}

class Ui {
    - **input** : Scanner
    + {static} **showLine** (): void
    + **getUserInput** (): String
    + **displayQuestion** (question: Question, currentQuestionIndex: int, totalQuestions: int): void
    + **displayMessage** (message: String): void
    + **displayOpeningMessage** (): void
    + **displayClosingMessage** (): void
}

class Storage {
    - **dataFile** : File
    - **writeToFile** (filePath: String, textToAdd: String, toAppend: boolean): void
    + **loadData** (questions: QuestionList): void
    + **updateData** (questions: QuestionList): void
    + **buildCurrentListFromFile** (questions: QuestionList): void
    - **addShortAnsFromFile** (questions: QuestionList, qnDescription: String,  qnDoneStatus: String, difficulty: Question.QnDifficulty, qnModule: String): int
    - **addMCQFromFile** (questions: QuestionList, qnDescription: String,  qnDoneStatus: String, difficulty: Question.QnDifficulty, qnModule: String): int
}

class QuestionList {
    + **addShortAnswerQn** (description: String, answer: String, module: String, qnDifficulty: Question.QnDifficulty, showMessage: boolean): boolean
    + **addMultipleChoiceQn** (description: String, option1: String, option2: String, option3: String, option4: String, answer: int, module: String, qnDifficulty: Question.QnDifficulty, showMessage: boolean): boolean
    + **markQuestionDifficulty** (index: int, qnDifficulty: Question.QnDifficulty, showMessage: boolean): void
    + **deleteQuestionByIndex** (index: int): void
    + **viewQuestionByIndex** (index: int): String
    + **editQuestionByIndex** (index: int, editField: String, newValue: String): void
    + **searchListByDescription** (keyword: String): void
    + **searchListByModule** (module: String): void
    + **shuffleQuestions** (ui: Ui): void
    + **getQuestionListSize** (): int
    + **getAllQns** (): ArrayList<Question>
    + **startQuiz** (ui: Ui, questions: ArrayList<Question>): void
}

class Question {
    - **description** : String
    - **module** : String
    - **done** : boolean
    + **getQuestionDescription** (): String
    + **getQuestionAnswer** (): String
    + **getQuestionType** (): QnType
    + **getModule** (): String
    + **getDifficulty** (): QnDifficulty
    + **editQuestion** (newDescription: String, newAnswer: String): void
    + **markDifficulty** (qnDifficulty: QnDifficulty): void
    + **checkAnswerCorrectness** (userAnswer: String): boolean
}

class Command {
  + **executeCommand** (ui: Ui, dataStorage: Storage, questions: QuestionList): void
  + **toExit** (): boolean
}

enum CommandType <<enumeration>> {
    HELP, ADD, LIST, EDIT, DELETE, START, SHUFFLE, MARKDIFFICULTY, FIND, EXIT, INVALID
}

enum QnType <<enumeration>> {
    SHORTANSWER, MULTIPLECHOICE, DEFAULT
}
enum QnDifficulty <<enumeration>>{
    EASY, HARD, NORMAL, INVALID
}

Question --> QnDifficulty: QnDifficulty "1"
Question --> QnType: QnType "1"

Command --> CommandType: commandType "1"


QuestionList --> Question: allQns "*"

QuizHub --> Parser: gets user command from "1"
QuizHub --> Ui: displays message with "1"
QuizHub --> Storage: stores data to "1"
QuizHub --> QuestionList: manipulates data with "1"
QuizHub -[dashed]-> Command

Ui --> QuestionList: fetches question info from "1"
Ui --> Storage: stores data to "1"

Parser --> QuestionList: manipulates data with "1"


@enduml