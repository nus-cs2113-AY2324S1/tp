package seedu.nuscents.data;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import seedu.nuscents.data.transaction.Expense;
import seedu.nuscents.data.transaction.ExpenseCategory;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.text.SimpleDateFormat;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static seedu.nuscents.ui.Messages.LINE;

public class TransactionListTest {
    private TransactionList transactionList;
    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;

    @BeforeEach
    public void setUp() {
        transactionList = new TransactionList();
        transactionList.clearTransactionList();
        System.setOut(new PrintStream(outContent));
    }

    @AfterEach
    public void tearDown() {
        System.setOut(originalOut);
    }

    @Test
    public void testViewTransaction() {
        Date date = new Date(123, 10, 31);
        Expense transaction = new Expense(100.0f, date,
                "Sample Description", "Sample Note", ExpenseCategory.FOOD);

        transactionList.addTransaction(transaction);

        transactionList.viewTransaction(1);

        String expectedOutput = LINE + "\n" +
                "Got it. I've added this transaction:\n" +
                "  Sample Description\n" +
                "Now you have 1 transactions in the list.\n" +
                LINE + "\n" +
                LINE + "\n" +
                "Following are details of the transaction:\n" +
                "TYPE: EXPENSE\n" +
                "DATE: " + new SimpleDateFormat("dd MMMM, yyyy").format(date) + "\n" +
                "AMOUNT: 100.0\n" +
                "DESCRIPTION: Sample Description\n" +
                "NOTE: Sample Note\n" +
                "CATEGORY: FOOD\n" +
                LINE;
        String actualOutput = outContent.toString().replaceAll("\\r\\n", "\n").trim();

        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    public void testFilterTransaction() {
        Date date = new Date(123, 10, 31);
        Expense transaction2 = new Expense(30.0f,
                date, "Transaction 2", "Note 2", ExpenseCategory.ENTERTAINMENT);

        transactionList.addTransaction(transaction2);

        transactionList.filterTransaction(ExpenseCategory.ENTERTAINMENT);

        // Verify the output generated by the filterTransaction method for the ENTERTAINMENT category
        String expectedOutput = LINE + "\n" +
                "Got it. I've added this transaction:\n" +
                "  Transaction 2\n" +
                "Now you have 1 transactions in the list.\n" +
                LINE + "\n" +
                LINE + "\n" +
                "Filtered transactions in the category ENTERTAINMENT:\n" +
                LINE + "\n" +
                "S/N    TYPE        AMOUNT   DATE                DESCRIPTION      NOTE        CATEGORY \n" +
                LINE + "\n" +
                "1      Expense     $30.00   " + new SimpleDateFormat("dd MMMM, yyyy").format(date) +
                "   Transaction 2    Note 2      ENTERTAINMENT \n" +
                LINE + "\n" +
                "Total amount for ENTERTAINMENT = 30.00\n" +
                LINE;
        String actualOutput = outContent.toString().replaceAll("\\r\\n", "\n").trim();
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    public void testShowFilterNotFoundMessage() {
        transactionList.filterTransaction(ExpenseCategory.TRANSPORTATION);

        // Verify the output generated by the showFilterNotFoundMessage method
        String expectedOutput = LINE + "\n" +
                "No transactions found in the category TRANSPORTATION\n" +
                LINE;
        String actualOutput = outContent.toString().replaceAll("\\r\\n", "\n").trim();

        assertEquals(expectedOutput, actualOutput);
    }
}
